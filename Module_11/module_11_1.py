'''
Домашнее задание по теме "Обзор сторонних библиотек Python"
Если вы решали старую версию задачи, проверка будет производиться по ней.
Ссылка на старую версию тут.
Цель: познакомиться с использованием сторонних библиотек в Python и применить их в различных задачах.

Задача:
Выберите одну или несколько сторонних библиотек Python, например, requests, pandas, numpy, matplotlib, pillow.
После выбора библиотек(-и) изучите документацию к ней(ним), ознакомьтесь с их основными возможностями и функциями.
К каждой библиотеке дана ссылка на документацию ниже.
Если вы выбрали:
requests - запросить данные с сайта и вывести их в консоль.
pandas - считать данные из файла, выполнить простой анализ данных (на своё усмотрение) и вывести результаты в консоль.
numpy - создать массив чисел, выполнить математические операции с массивом и вывести результаты в консоль.
matplotlib - визуализировать данные с помощью библиотеки любым удобным для вас инструментом из библиотеки.
pillow - обработать изображение, например, изменить его размер, применить эффекты и сохранить в другой формат.
В приложении к ссылке на GitHub напишите комментарий о возможностях, которые предоставила вам выбранная библиотека
и как вы расширили возможности Python с её помощью.
Примечания:
Можете выбрать не более 3-х библиотек для изучения.
Желательно продемонстрировать от 3-х функций/классов/методов/операций из каждой выбранной библиотеки.
___________________________________________________________________________________________________________________



Библиотека "requests" значительно упрощает работу с HTTP-запросами в Python, делая код более чистым и понятным.
Она предоставляет удобный способ отправки GET и POST запросов, обработки ответов, работы с заголовками и куки.
С помощью "requests" можно легко получать данные с веб-сайтов (парсить) и API.

В примере библиотеки "requests" были использованы:
    requests.get(): Для отправки GET-запроса к серверу.
    response.status_code: Для проверки статуса ответа (200 означает успех).
    response.headers: Для доступа к заголовкам ответа.
    response.content: Для доступа к содержимому ответа.
    requests.post(): Для отправки POST-запроса с данными.
    response.json(): Для преобразования ответа в формат JSON (если это возможно).

Библиотека "matplotlib" предоставляет отличный(полный, обширный) инструментарий для визуализации данных.
С помощью "matplotlib" можно создавать различные типы графиков, настраивать их внешний вид. Визуализация данных
с помощью "matplotlib" делает анализ данных более наглядным и понятным.

В примере библиотеки "matplotlib" были использованы:
    plt.plot(): Для построения линейного графика.
    plt.xlabel(), plt.ylabel(), plt.title(): Для добавления подписей к осям и заголовка.
    plt.legend(): Для отображения легенды.
    plt.grid(True): Для включения сетки на графике.
    plt.savefig(): Для сохранения графика в файл.
    plt.show(): Для отображения графика.
    plt.hist(): Для построения гистограммы.
    Параметры color, linestyle, marker для настройки внешнего вида графиков.
'''

import requests
import matplotlib.pyplot as plt
import numpy as np

# Делаем запрос
response = requests.get('https://www.example.com/')

# Проверяем, какой статус у запроса
if response.status_code == 200:
    print("Подключились успешно!")
    print("Заголовки:", response.headers)  # Выводим заголовки
    print("Контент:", response.content[:100])  # Выводим первые 100 символов контента

else:
    print("Ошибка:", response.status_code)

# Отправляем POST-запрос с данными
data = {'key1': 'value1', 'key2': 'value2'}
post_response = requests.post('https://httpbin.org/post', data=data)

if post_response.status_code == 200:
    print("POST-запрос успешен!")
    print(post_response.json())  # Выводим ответ в формате JSON

else:
    print("Ошибка POST-запроса:", post_response.status_code)

# Генерируем данные для графиков
x = np.linspace(0, 10, 100)
y1 = np.sin(x)
y2 = np.cos(x)

# Создаем график
plt.figure(figsize=(8, 6))  # Устанавливаем размер графика

plt.plot(x, y1, label='sin(x)', color='blue', linestyle='--')  # Линия для sin(x)
plt.plot(x, y2, label='cos(x)', color='red', marker='o')  # Линия для cos(x)

plt.xlabel('x')  # Подпись оси X
plt.ylabel('y')  # Подпись оси Y
plt.title('Графики sin(x) и cos(x)')  # Заголовок графика
plt.legend()  # Отображаем легенду
plt.grid(True)  # Включаем сетку

# Сохраняем график в файл
plt.savefig('my_graph.png')

# Отображаем график
plt.show()

# Создаем гистограмму
data = np.random.normal(size=1000)  # Генерируем случайные данные
plt.hist(data, bins=30, color='green', alpha=0.7)  # Строим гистограмму

plt.xlabel('Значения')
plt.ylabel('Частота')
plt.title('Гистограмма')

plt.show()
