# Практическое задание по теме: "Неизменяемые и изменяемые объекты. Кортежи и списки"
#
# Цель:
# Написать программу на языке Python, используя Pycharm, для работы с неизменяемыми и изменяемыми объектами.
#
# 1. В проекте, где вы решаете домашние задания, создайте модуль 'homework5.py' и напишите весь код в нём.
#
# 2. Задайте переменные разных типов данных:
#   - Создайте переменную immutable_var и присвойте ей кортеж из нескольких элементов разных типов данных.
#   - Выполните операции вывода кортежа immutable_var на экран.
#
# 3. Изменение значений переменных:
#   - Попытайтесь изменить элементы кортежа immutable_var. Объясните, почему нельзя изменить значения элементов кортежа.
#
# 4. Создание изменяемых структур данных:
#   - Создайте переменную mutable_list и присвойте ей список из нескольких элементов.
#   - Измените элементы списка mutable_list.
#   - Выведите на экран измененный список mutable_list.
#
# Примечания:
# - Для вывода значений на экран используйте функцию print().
# - Обратите внимание на особенности изменяемых и неизменяемых объектов в Python.
#
# Пример результата выполнения программы:
# Immutable tuple: (1, 2, 'a', 'b')
# Mutable list: [1, 2, 'a', 'b', 'Modified']
#
# Файл с кодом (homework5.py) прикрепите к домашнему заданию.
#
# ____________________________________________________________________________________________________

# 2.    Задайте переменные разных типов данных:
#   - Создайте переменную immutable_var и присвойте ей кортеж из нескольких элементов разных типов данных.
#   - Выполните операции вывода кортежа immutable_var на экран.

immutable_var = 2, [5, 7, 9], 'True'
print(immutable_var)

# 3.    Изменение значений переменных:
#   - Попытайтесь изменить элементы кортежа immutable_var. Объясните, почему нельзя
#   изменить значения элементов кортежа.
print()

immutable_var = 2, [5, 7, 9], 'True'
print(immutable_var[1])
immutable_var[1].append(10)
print(immutable_var, type(immutable_var))
# отсюда можем сделать вывод, что хотя кортеж и является неизменяемым объектом,
# но, внутри его могут находиться изменяемыми объекты, которые можно изменить.

print()

# кортежи нужны для того, что бы гарантировать неизменяемость списка.
# Пример насколько важно использовать кортеж а не список:
immutable_var = [2, [5, 7, 9], 'True']
print(immutable_var, type(immutable_var))
immutable_char = immutable_var
print(immutable_var)
print(immutable_char)
# если изменить второй список, изменится и первый.
immutable_char[1] = 3.14
print(immutable_var)
print(immutable_char)
# таким образом видно, что изменив данные в переменной immutable_char, изменились данные
# и в начальном списке.
# ВАЖНО: При большом количестве данных, можно случайно изменить
# информацию там, где этого делать не нужно, пользуясь списком (list).


# теперь касательно кортежа. При желании его можно изменить/дополнить, если ошибаюсь,
# прошу поправить. Следующим способом:
print()
immutable_var = [2, [5, 7, 9], 'True']
immutable_var = list([2, [5, 7, 9], 'True'])  # из кортежа получили список
print(immutable_var, type(immutable_var))
# изменяем список
immutable_var[2] = 1000
print(immutable_var)
# и возвращаем кортеж
immutable_var = tuple(immutable_var)
print(immutable_var, type(immutable_var))

# Таким образом, отвечая на второй вопрос, кортеж хоть и не изменяем, его всё же можно изменить или дополнить.
# Ограничения есть только внутри условия кортежа.


# 4. Создание изменяемых структур данных:
#   - Создайте переменную mutable_list и присвойте ей список из нескольких элементов.
#   - Измените элементы списка mutable_list.
#   - Выведите на экран измененный список mutable_list.

mutable_list = ['Hello', 'World']
print(mutable_list)
mutable_list[1]='teacher'

print(mutable_list)


