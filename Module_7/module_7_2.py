'''
Домашнее задание по теме "Позиционирование в файле".
Цель: Закрепить знания о позиционировании в файле, использовав метод tell() файлового объекта.
Написать усовершенствованную функцию записи.

Задача "Записать и запомнить":
Создайте функцию custom_write(file_name, strings), которая принимает аргументы file_name - название файла для записи,
strings - список строк для записи.
Функция должна:
Записывать в файл file_name все строки из списка strings, каждая на новой строке.
Возвращать словарь strings_positions, где ключом будет кортеж (<номер строки>, <байт начала строки>), а значением -
записываемая строка. Для получения номера байта начала строки используйте метод tell() перед записью.
Пример полученного словаря:
{(1, 0): 'Text for tell.', (2, 16): 'Используйте кодировку utf-8.'}
Где:
1, 2 - номера записанных строк.
0, 16 - номера байт, на которых началась запись строк.
'Text for tell.', 'Используйте кодировку utf-8.' - сами строки.

Пример результата выполнения программы:
Пример выполняемого кода:
info = [
    'Text for tell.',
    'Используйте кодировку utf-8.',
    'Because there are 2 languages!',
    'Спасибо!'
    ]

result = custom_write('test.txt', info)
for elem in result.items():
  print(elem)

Вывод на консоль:
((1, 0), 'Text for tell.')
((2, 16), 'Используйте кодировку utf-8.')
((3, 66), 'Because there are 2 languages!')
((4, 98), 'Спасибо!')

Примечания:
Не забывайте при записи в файл добавлять спец. символ перехода на следующую строку в конце - '\n'.
Не забывайте закрывать файл вызывая метод close() у объектов файла.
Помните, что при использовании символов не принадлежащих таблице ASCII, вы используете больше байт для
записи символа. Соответственно для чтения и записи информации из/в файл(-f) потребуется другая кодировка - utf-8.

Объяснение кода:
1. Функция custom_write:
   a) Принимает два аргумента: file_name - имя файла для записи и strings - список строк.
   b) Создает пустой словарь strings_positions, который будет хранить кортежи с номером строки и начальной позицией в
   байтах как ключи, а сами строки - как значения.

2. Запись в файл:
   a) Открывает файл с указанным именем в режиме записи ('w') и с кодировкой utf-8.
   b) Для каждой строки из списка strings:
     - Получает текущую позицию в файле с помощью метода tell(), который возвращает номер байта, на котором будет
     происходить следующая запись.
     - Записывает строку в файл, добавляя символ новой строки ('\n') в конце.
     - Добавляет запись о позиции и строке в словарь strings_positions.

3. Возврат результата:
   a) После завершения записи функция возвращает словарь strings_positions.

4) Использование with open(...) обеспечивает автоматическое закрытие файла после завершения блока, что делает код
более безопасным и чистым.
_________________________________________________________________________________________________________
'''


def custom_write(file_name, strings):
    strings_positions = {}  # Создаем пустой словарь, который будет хранить кортежи с номером строки и
    # начальной позицией в байтах как ключи, а сами строки - как значения.

    with open(file_name, 'w', encoding='utf-8') as file:
        for i, string in enumerate(strings, start=1):
            # Получаем текущую позицию в байтах перед записью
            byte_position = file.tell()
            # Записываем строку в файл с добавлением символа новой строки
            file.write(string + '\n')
            # Сохраняем информацию о позиции и строке в словаре
            strings_positions[(i, byte_position)] = string

    return strings_positions


# Пример выполняемого кода
info = [
    'Text for tell.',
    'Используйте кодировку utf-8.',
    'Because there are 2 languages!',
    'Спасибо!'
]

result = custom_write('test.txt', info)
for elem in result.items():
    print(elem)
