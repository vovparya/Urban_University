'''
Домашнее задание по теме "Генераторы"
Цель: более глубоко понять особенности работы с функциями генераторами и оператором yield в Python.

Задача:
Напишите функцию-генератор all_variants(text), которая принимает строку text и возвращает объект-генератор,
при каждой итерации которого будет возвращаться подпоследовательности переданной строки.

Пункты задачи:
Напишите функцию-генератор all_variants(text).
Опишите логику работы внутри функции all_variants.
Вызовите функцию all_variants и выполните итерации.
Пример результата выполнения программы:
Пример работы функции:
a = all_variants("abc")
for i in a:
print(i)
Вывод на консоль:
a
b
c
ab
bc
abc

Примечания:
Для функции генератора используйте оператор yield.
__________________________________________________________________________
'''


def all_variants(text):
    # Генерация одиночных символов
    for i in range(len(text)):
        yield text[i]  # отдаём по одному символу
        '''
        оператор `yield` позволяет функции возвращать значение и при этом сохранять своё состояние, 
        чтобы продолжить выполнение с того места, где она остановилась, когда вызвана снова. Таким образом, 
        при первом проходе этой части кода функция будет возвращать по одному символу из строки.
        '''

    # Генерация всех последовательностей длиной больше одной
    for length in range(2, len(text) + 1):
        '''
        этот цикл устанавливает длину подстроки, начиная с 2 (так как одиночные 
        символы уже обработаны выше) и до длины строки (включительно).
        '''
        for start in range(len(text) - length + 1):
            '''
            цикл проходит по всем возможным стартовым индексам для подстроки длины `length`. Он вычисляет 
            количество возможных стартовых индексов, чтобы избежать выхода за пределы строки.
            '''
            yield text[start:start + length]  # срез для получения подпоследовательности
            '''
            возвращает срез строки с начальным индексом `start` длиной `length`. Это 
            создаёт подстроку, начиная от `start` и заканчивая на `start + length`.
            '''


# Пример работы функции
a = all_variants("abc")
for i in a:
    print(i)

'''
- При первой итерации использования for i in a:
- Генератор возвращает 'a', затем 'b', затем 'c' (из первой части функции).
   - На следующей итерации:
- Генератор возвращает 'ab' (подстрока длины 2, начиная с индекса 0).
- Затем 'bc' (подстрока длины 2, начиная с индекса 1).
- Наконец возвращает 'abc' (подстрока длины 3, начиная с индекса 0).
'''
