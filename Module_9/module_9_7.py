'''
Домашнее задание по теме "Декораторы"
Задание: Декораторы в Python

Цель задания:
Освоить механизмы создания декораторов Python.
Практически применить знания, создав функцию декоратор и обернув ею другую функцию.

Задание:
Напишите 2 функции:
Функция, которая складывает 3 числа (sum_three)
Функция декоратор (is_prime), которая распечатывает "Простое", если результат 1ой
функции будет простым числом и "Составное" в противном случае.
Пример:
result = sum_three(2, 3, 6)
print(result)

Результат консоли:
Простое
11

Примечания:
Не забудьте написать внутреннюю функцию wrapper в is_prime
Функция is_prime должна возвращать wrapper
@is_prime - декоратор для функции sum_three
______________________________________________________________________________________________________________
'''

'''
        Чтобы проверить, является ли число `result` простым, нам нужно проверить, делится ли оно на
        любое число от 2 до `result - 1`. Это потребовало бы очень много проверок для больших чисел.

        Если n (например, `result`) можно представить в виде произведения двух
        чисел, скажем, a и b, то можно сказать, что:  a × b = n.
        Если оба числа (a и b) больше квадратного корня числа `n`, то их произведение будет больше `n`.
        Поэтому как только мы исследуем делители до квадратного корня, мы можем быть уверены, что если число не
        делится на любое из них, то оно не будет делиться и на числа, большие его квадратного корня.
'''


def is_prime(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        if result > 1:  # Проверяем, что число больше 1
            for i in range(2, int(result ** 0.5) + 1):
                if result % i == 0:  # Если число делится на i, то оно составное
                    print("Составное")
                    return result
            print("Простое")  # Если не нашли делителей, значит, число простое
        else:
            print("Составное")
        return result

    return wrapper


@is_prime  # Применяем декоратор к функции sum_three
def sum_three(a, b, c):
    return a + b + c


# Пример использования
result = sum_three(2, 3, 6)  # Результат 11 (простое число)
print(result)
